// Generated by LiveScript 1.4.0
(function(){
  "use strict";
  var _, $, _n, _vars, _func, _stor, UserInfo;
  _ = this['_'];
  $ = this['jQuery'] || this['Zepto'];
  this.N = this.ndoo || (this.ndoo = {});
  _n = this.ndoo;
  _vars = _n.vars;
  _func = _n.func;
  _stor = _n.storage;
  UserInfo = (function(){
    UserInfo.displayName = 'UserInfo';
    var prototype = UserInfo.prototype, constructor = UserInfo;
    prototype.render = function(type){
      var html, user, userName;
      if (type === 'signFrom') {
        html = "<form class=\"navbar-form navbar-right\">\n  <div class=\"form-group\">\n    <input type=\"text\" placeholder=\"ID/Email\" class=\"ctl-id form-control\">\n  </div>\n  <div class=\"form-group\">\n    <input type=\"password\" placeholder=\"Password\" class=\"ctl-password form-control\">\n  </div>\n  <button type=\"button\" class=\"btn btn-success ctl-button\">Sign in</button>\n</form>";
      } else {
        user = _n.service('user');
        userName = user.get('userName');
        html = "<div class=\"navbar-text navbar-right\">\n  UserName: " + userName + "\n</div>";
      }
      return this.$el.html(html);
    };
    prototype.btnSuccess = function(e){
      var user, id, password, result;
      user = _n.service('user');
      id = this.$el.find('.ctl-id');
      password = this.$el.find('.ctl-password');
      result = user.auth(id.val(), password.val());
      if (!result) {
        alert('signin failer!');
      }
    };
    prototype.events = {
      'click .ctl-button': 'btnSuccess'
    };
    prototype.userSignin = function(){
      this.render('userInfo');
    };
    prototype.messages = {
      'APP_USER_SIGNIN': 'userSignin'
    };
    prototype.initEvent = function(){
      var key, ref$, item, _call, eventMatch, results$ = [];
      if (this.events) {
        for (key in ref$ = this.events) {
          item = ref$[key];
          _call = _.bind(this[item], this);
          eventMatch = key.match(/^([^\s]+)\s*(.*)$/);
          if (eventMatch) {
            if (eventMatch.length === 2) {
              results$.push(this.$el.on(key, _call));
            } else if (eventMatch.length === 3) {
              results$.push(this.$el.on(eventMatch[1], eventMatch[2], _call));
            }
          }
        }
        return results$;
      }
    };
    prototype.initMessage = function(){
      var key, ref$, item, _call, results$ = [];
      if (this.messages) {
        for (key in ref$ = this.messages) {
          item = ref$[key];
          _call = _.bind(this[item], this);
          results$.push(_n.on(key, _call));
        }
        return results$;
      }
    };
    prototype.init = function(elem, param){
      var user;
      user = _n.service('user');
      this.$el = $(elem);
      if (user.hasSignin()) {
        this.render('userInfo');
      } else {
        this.render('signFrom');
      }
      this.initEvent();
      this.initMessage();
    };
    function UserInfo(){}
    return UserInfo;
  }());
  _n.block('block.userInfo', new UserInfo());
}).call(this);
