extends shared/_layout

block pageTitle
  include shared/_variable
  include shared/_mixin
  title 事件参考#{titleSuffix}

block pageHeader
  h1 事件参考
  p ndoojs采用一种定制的事件机制来完成组件之间模块之间的衔接。

block pageContent
  h3 1. 事件api
  +renderCode('javascript')
    ="// 注册事件绑定\n"
    ="ndoo.on(\n"
    ="  (string) eventName, // 事件名称\n"
    ="  (fn) callback       // 回调函数\n"
    =")\n"
    ="// 触发事件\n"
    ="ndoo.trigger(\n"
    ="  (string)eventName  // 事件名称\n"
    ="  [, data...]        // 传递参数\n"
    =")\n"
    ="// 移除事件\n"
    ="ndoo.off(\n"
    ="  (string)eventName  // 事件名称\n"
    =")"
  p 可以一次绑定多个事件，多个事件之间用"空格"分隔。如 _n.on('event1 event2', callback);。

  h3 2. 事件类型
  p ndoojs的事件分为三种，分别为 default, delay, status，对应三种情况。声明时不区分事件类型，触发时通过事件前缀 DEFAULT、DELAY、STATUS触发不同事件。default事件为默认事件，可以省略前缀。
  h4 2.1 default 事件
  p default事件是普通事件，通过on绑定，trigger触发。示例：
  pre: code(data-language="javascript")
  +renderCode('javascript')
    ="ndoo.on('customEvent', function(foo, bar) {\n"
    ="  alert(foo + bar);\n"
    ="});\n"
    ="\n"
    ="ndoo.trigger('customEvent');"
  h4 2.2 delay 事件
  p delay为延迟事件，即先用trigger触发的事件，可以引发后面用on绑定的回调。示例：
  +renderCode('javascript')
    ="ndoo.trigger('DELAY:customDelayEvent');\n"
    ="\n"
    ="ndoo.on('customDelayEvent', function(foo, bar) {\n"
    ="  alert(foo + bar);\n"
    ="});"
  h4 2.3 status 事件
  p status 为状态事件，当一个状态事件触发后，在事件触发前绑定的回调会执行，之后绑定的回调也会执行。示例：
  +renderCode('javascript')
    ="ndoo.on('customStatusEvent', function(foo, bar) {\n"
    ="  alert(foo + bar);\n"
    ="});\n"
    ="\n"
    ="ndoo.trigger('STATUS:customStatusEvent');\n"
    ="\n"
    ="ndoo.on('customStatusEvent', function(foo, bar) {\n"
    ="  alert(foo + bar);\n"
    ="});"
  h3 3. 系统事件
  p ndoojs自身实现了一件事件，具体如下：
  pre: code(data-language="javascript")
  +renderCode('javascript')
    ="STATUS:PAGE_STATUS_FAST      // 最行被执行的事件\n"
    ="STATUS:PAGE_STATUS_DOMPREP   // DOMLOADED事件之前触发\n"
    ="STATUS:PAGE_STATUS_DOM       // DOMLOADED事件时触发\n"
    ="STATUS:PAGE_STATUS_DOMORLOAD // DOMLOADED事件之后触发\n"
    ="STATUS:PAGE_STATUS_LOAD      // ONLOAD事件后触发\n"
    ="\n"
    ="STATUS:PAGE_STATUS_ROUTING   // 页面路由事件\n"
    ="\n"
    ="STATUS:NAPP_DEFINE           // 模块定义事件\n"
    ="NAPP_LOADED                  // 模块加载完成\n"
    ="STATUS:NBLOCK_INIT           // 块组件定义事件\n"
    ="NBLOCK_LOADED                // 块组件加载完成\n"
    ="\n"
    ="NAPP_ACTION_BEFORE           // 全局 action 前置事件\n"
    ="NAPP_ACTION_AFTER            // 全局 action 后置事件\n"
    ="NAPP_[PREFIX]_ACTION_BEFORE  // 针对特定模块的 action 前置事件\n"
    ="NAPP_[PREFIX]_ACTION_AFTER   // 针对特定模块的 action 后置事件"
