extends shared/_layout

block pageTitle
  include shared/_variable
  include shared/_mixin
  title 块级组件#{titleSuffix}

block pageHeader
  h1 块级组件

block pageContent
  p ndoojs支持块级组件，通过标签上的属性载入组件并自动执行。

  h3 1.页面中上添加组件标识
  +renderCode('html')
    ='<div id="testBlock" data-nblock-id="test/main?abc=1"></div>'
  p.notice 组件会被自动实例化，如果希望组件在后面手动运行，需要设置一行属性 data-nblock-auto="false"。

  h3 2.定义模块
  p file: ndoo.block.test.js
  +renderCode('javascript')
    ="_n.block('test.main', {\n"
    ="  init: function(elem, params){\n"
    ="    console.log('init test block');\n"
    ="  }\n"
    ="});"
  p.notice block的值可以是一个函数或者对象，如果为对象则会尝试调用init入口函数，如果为函数则直接被调用。

  h3 3.自动加载
  p
    |3.1 引入do.js以及模块定义文件
    |此处用到了事件系统，参见
    a(href="event.html") event。
  +renderCode('html')
    ='<script src="lib/Do.js"></script>'
  p 3.2 定义依赖
  +renderCode('javascript')
    ="(function(){\n"
    ="  var _n;\n"
    ="  this.N = this.ndoo || (this.ndoo = {});\n"
    ="  _n = this.ndoo;\n"
    ="\n"
    ="  Do.define('test.main', {\n"
    ="    path: currJsPath + '/ndoo.block.test.js',\n"
    ="    type: 'js'\n"
    ="  });\n"
    ="  _n.on('NBLOCK_DEFINE', function(){\n"
    ="    _n.setBlock('test.main');\n"
    ="  });\n"
    ="\n"
    ="}).call(this);"

  h3 4.完整代码如下：
  p html
  +renderCode('html')
    ='<!DOCTYPE html>\n'
    ='<html>\n'
    ='  <head>\n'
    ='    <meta charset="UTF-8">\n'
    ='    <title>example</title>\n'
    ='  </head>\n'
    ='  <body>\n'
    ='    <div id="testBlock" data-nblock-id="test/main?abc=1"></div>\n'
    ='    <p id="content"></p>\n'
    ='    <div id="scriptArea" data-page-id="home/index">\n'
    ='      <script src="lib/underscore-min.js"></script>\n'
    ='      <script src="lib/jquery-2.1.1.min.js"></script>\n'
    ='      <script src="lib/Do.js"></script>\n'
    ='      <script src="js/ndoo_all.js"></script>\n'
    ="      <script>\n"
    ="        (function(){\n"
    ="          var _n;\n"
    ="          this.N = this.ndoo || (this.ndoo = {});\n"
    ="          _n = this.ndoo;\n"
    ="\n"
    ="          Do.define('test.main', {\n"
    ="            path: currJsPath + '/ndoo.block.test.js',\n"
    ="            type: 'js'\n"
    ="          });\n"
    ="          _n.on('NBLOCK_DEFINE', function(){\n"
    ="            _n.setBlock('test.main');\n"
    ="          });\n"
    ="          _n.init();\n"
    ="\n"
    ="        }).call(this);\n"
    ='      </script>\n'
    ='    </div>\n'
    ='  </body>\n'
    ='</html>'
  p ndoo.block.test.js
  +renderCode('javascript')
    ="(function(){\n"
    ="  'use strict';\n"
    ="  var _, $, _n, _vars, _func, _stor;\n"
    ="  _ = this['_'];\n"
    ="  $ = this['jQuery'] || this['Zepto'];\n"
    ="  this.N = this.ndoo || (this.ndoo = {});\n"
    ="  _n = this.ndoo;\n"
    ="  _vars = _n.vars;\n"
    ="  _func = _n.func;\n"
    ="  _stor = _n.storage;\n"
    ="  _n.block('test.main', {\n"
    ="    init: function(elem, params){\n"
    ="      console.log('init test block');\n"
    ="    }\n"
    ="  });\n"
    ="  /* vim: se ts=2 sts=2 sw=2 fdm=marker cc=80 et: */\n"
    ="}).call(this);"

  p.notice
    |查看
    a(href="#{exampleBaes}/test.block.html") test.block.html

  h3 5.执行多个block
  p 在某些特定情况，我们需要运行多个block，但并不对应具体的dom。这个时候可以在一个空div上面设置多个block id来实现。多个block id之间使用空格区分。示例：
  +renderCode('html')
    ='<div id="blockElement" data-nblock-id="ui/loading ui/back2top"></div>'
  p.notice ui/loading ui/back2top 会依次执行
